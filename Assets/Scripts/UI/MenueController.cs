using UnityEngine;
using UnityEngine.EventSystems;

/// <summary>
/// Controlls a single slider menue. Implements DragHandler interfaces to enable draging to close the slider menue via swipe.
/// </summary>
public class MenueController : MonoBehaviour, IBeginDragHandler, IDragHandler, IEndDragHandler {
    /// <summary>Saves the GameObject (Menue) that is being draged by the user</summary>
    public static GameObject ItemBeingDragged;

    /// <summary>Used to determine size of the canvas</summary>
    public RectTransform CanvasRectTransform;

    /// <summary>The height in percentage of the screen to which the menue extends</summary>
    public float MenueExpandedHeight = 0.8f;

    /// <summary>The height in percentage of the screen after which the menue is expanded/unexpanded (Deadzone)</summary>
    public float MenueExbandTriggerHeight = 0.6f;

    /// <summary>Controlls how fast the menue will lerp</summary>
    public float LerpSpeed = 4f;

    public MainMenueController MainMenueControll;
    
    /// <summary>Saves the canvas height times the y-scale</summary>
    private static float canvasHeight;

    /// <summary>Saves the y component of the menues position after loading</summary>
    private float startYMenue;

    /// <summary>Saves the position of the menue before starting the lerp</summary>
    private Vector3 startMarker;

    /// <summary>Saves the desired position of the menue after the lerp</summary>
    private Vector3 endMarker;

    /// <summary>Saves the distance between the startMarker and the endMarker</summary>
    private float distanceStartEndMarker;

    /// <summary>Saves the time at which the Expand or Unexpand method is executed. Used to calculate the desired percentage for the lerp.</summary>
    private float lerpStartTime;

    /// <summary>Saves if the menue is lerping at the moment</summary>
    private bool menueLerping;

    /// <summary>
    /// Triggered when the drag begins. Sets ItemBeingDragged.
    /// </summary>
    /// <param name="eventData">The PointerEventData generated by the DragEvent</param>
    public void OnBeginDrag(PointerEventData eventData) {
        if (MainMenueControll.IsExpanded) {
            ItemBeingDragged = this.gameObject;
        }
    }

    /// <summary>
    /// Triggered every frame while draging. Updates position of menue (Restricted by MenueExpandedHeight and startYMenue).
    /// </summary>
    /// <param name="eventData">The PointerEventData generated by the DragEvent</param>
    public void OnDrag(PointerEventData eventData) {
        if (MainMenueControll.IsExpanded) {
            if (eventData.position.y > canvasHeight * this.MenueExpandedHeight) {
                transform.position = new Vector3(transform.position.x, canvasHeight * this.MenueExpandedHeight, 0);
            } else if (eventData.position.y < startYMenue) {
                transform.position = new Vector3(transform.position.x, startYMenue, 0);
            } else {
                transform.position = new Vector3(transform.position.x, eventData.position.y, 0);
            }
        }
    }

    /// <summary>
    /// Triggered when draging ends. Calls Expand or Unexpand based on position.
    /// </summary>
    /// <param name="eventData">The PointerEventData generated by the DragEvent</param>
    public void OnEndDrag(PointerEventData eventData) {
        if (MainMenueControll.IsExpanded) {
            ItemBeingDragged = null;

            if (transform.position.y > canvasHeight * this.MenueExbandTriggerHeight) {
                this.Expand(true);
            } else {
                this.Unexpand(true);
            }
        }
    }

    /// <summary>
    /// Expands the menue.
    /// </summary>
    /// <param name="animated">Determines wether this is done with an animation or instant</param>
    public void Expand(bool animated) {
        if (animated) {
            float y = canvasHeight * this.MenueExpandedHeight;
            MainMenueControll.IsExpanded = true;
            this.startMarker = transform.position;
            this.endMarker = new Vector3(transform.position.x, y, 0);

            this.distanceStartEndMarker = Vector3.Distance(this.startMarker, this.endMarker);

            if (this.distanceStartEndMarker <= 0.001f) {
                this.menueLerping = false;
            } else {
                this.menueLerping = true;
            }

            this.lerpStartTime = Time.time;
        } else {
            transform.position = new Vector3(transform.position.x, canvasHeight * this.MenueExpandedHeight, 0);
        }

        MainMenueControll.IsExpanded = true;
    }

    /// <summary>
    /// Unexpands the menue.
    /// </summary>
    /// <param name="animated">Determines wether this is done with an animation or instant</param>
    public void Unexpand(bool animated) {
        if (animated) {
            float y = startYMenue;
            MainMenueControll.IsExpanded = false;
            this.startMarker = transform.position;
            this.endMarker = new Vector3(transform.position.x, y, 0);
            this.distanceStartEndMarker = Vector3.Distance(this.startMarker, this.endMarker);
            this.menueLerping = true;
            this.lerpStartTime = Time.time;
        } else {
            transform.position = new Vector3(transform.position.x, startYMenue, 0);
        }

        MainMenueControll.IsExpanded = false;
    }

    /// <summary>Use this for initialization</summary>
    void Start() {
        canvasHeight = this.CanvasRectTransform.rect.height * this.CanvasRectTransform.localScale.y;
        startYMenue = transform.position.y;
    }

    /// <summary>Update is called once per frame</summary>
    void Update() {
        if (this.menueLerping) {
            float distCovered = (Time.time - this.lerpStartTime) * this.LerpSpeed * this.distanceStartEndMarker;
            
            float fracJourney = distCovered / this.distanceStartEndMarker;
            if (this.distanceStartEndMarker <= 1f) {
                this.menueLerping = false;
                return;
            }

            transform.position = Vector3.Lerp(this.startMarker, this.endMarker, fracJourney);
            
            if (fracJourney >= 1f) {
                this.menueLerping = false;
            }
        }
    }
}
